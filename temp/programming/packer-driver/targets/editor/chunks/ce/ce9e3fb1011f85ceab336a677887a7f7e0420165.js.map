{"version":3,"sources":["file:///Users/shivam/Desktop/JumpBird/assets/Scripts/GameCtrl.ts"],"names":["_decorator","CCInteger","Component","Node","director","Contact2DType","Collider2D","Ground","Results","Bird","BirdAudio","PipePool","ccclass","property","GameCtrl","type","tooltip","isOver","onLoad","initListener","result","resetScore","pause","node","on","EventType","TOUCH_START","resetGame","bird","resetBird","startGame","fly","clip","onAudioQueue","hideResults","resume","gameOver","showResults","pipeQueue","reset","passPipe","addScore","createPipe","addPool","contactGroundPipe","collider","getComponent","BEGIN_CONTACT","onBeginContact","selfcollider","otherCollider","contact","hitSomething","birdStruck","update"],"mappings":"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","sourcesContent":["import { _decorator, CCInteger, Component, Node, input, Input, EventKeyboard, KeyCode, director, pipeline, Contact2DType, Collider2D, IPhysics2DContact } from 'cc';\nimport { Ground } from './Ground';\nimport { Results } from './Results';\nimport { Bird } from './Bird';\nimport { BirdAudio } from './BirdAudio';\n\nimport { PipePool } from './PipePool';\nconst { ccclass, property } = _decorator;\n\n@ccclass('GameCtrl')\nexport class GameCtrl extends Component {\n    @property({\n        type: Ground,\n        tooltip : 'this is ground'\n    })\n    public ground : Ground;\n\n    @property({\n        type: Results,\n        tooltip: 'results go here'\n    })\n    public result : Results\n\n    @property({\n        type:Bird\n    })\n    public bird : Bird;\n\n    @property({\n        type:PipePool\n    })\n    public pipeQueue: PipePool;\n\n    @property({\n        type:BirdAudio\n    })\n    public clip : BirdAudio;\n\n    @property({\n        type: CCInteger\n    })\n    public speed : number = 350;\n\n    @property({\n        type:CCInteger\n    })\n    public pipeSpeed : number = 350;\n\n    public isOver : boolean;\n\n    protected onLoad(): void {\n        this.initListener();\n        this.result.resetScore();\n        this.isOver = true;\n        director.pause();\n    }\n\n    initListener() {\n        // input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\n\n        this.node.on(Node.EventType.TOUCH_START, () => {\n            if (this.isOver == true) {\n                this.resetGame();\n                this.bird.resetBird();\n                this.startGame();\n            }\n            if (this.isOver == false) {\n                this.bird.fly();\n                this.clip.onAudioQueue(0);\n            }\n        })\n    }\n\n    // testing method only\n    // onKeyDown(event : EventKeyboard) {\n    //     switch (event.keyCode) {\n    //         case KeyCode.KEY_A:\n    //             this.gameOver();\n    //         break;\n    //         case KeyCode.KEY_P:\n    //             this.result.addScore();\n    //         break;\n    //         case KeyCode.KEY_Q:\n    //             this.resetGame();\n    //             this.bird.resetBird();\n    //     }\n    // }\n\n    startGame() {\n        this.result.hideResults();\n        director.resume();\n    }\n\n    gameOver() {\n        this.result.showResults();\n        this.isOver = true;\n        this.clip.onAudioQueue(3);\n        director.pause();\n    }\n\n    resetGame() {\n        this.result.resetScore();\n        this.pipeQueue.reset();\n        this.isOver = false;\n        this.startGame();\n    }\n\n    passPipe() {\n        this.result.addScore();\n        this.clip.onAudioQueue(1);\n    }\n\n    createPipe() {\n        this.pipeQueue.addPool();\n    }\n\n    contactGroundPipe() {\n        let collider = this.bird.getComponent(Collider2D);\n\n        if (collider) {\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\n        }\n    }\n\n    onBeginContact(selfcollider: Collider2D, otherCollider : Collider2D, contact : IPhysics2DContact | null) {\n        this.bird.hitSomething = true;\n        this.clip.onAudioQueue(2);\n    }\n\n    birdStruck() {\n        this.contactGroundPipe();\n\n        if (this.bird.hitSomething == true) {\n            this.gameOver();\n        }\n    }\n\n    update() {\n        if (this.isOver == false) {\n            this.birdStruck();\n        }\n    }\n}"]}